/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package io.github.causewaystuff.companion.assets.scm.git;

import org.springframework.context.annotation.Bean;
import org.springframework.core.Ordered;

import io.spring.initializr.generator.project.ProjectGenerationConfiguration;
import io.spring.initializr.generator.spring.scm.git.GitIgnore;
import io.spring.initializr.generator.spring.scm.git.GitIgnoreCustomizer;

/**
 * Configuration for Git-related contributions to a generated project.
 * 
 * @see io.spring.initializr.generator.spring.scm.git.GitProjectGenerationConfiguration
 */
@ProjectGenerationConfiguration
public class GitProjectGenerationConfiguration {
    
    @Bean
    public CoGitIgnoreContributor companionGitIgnoreContributor(GitIgnore gitIgnore) {
        return new CoGitIgnoreContributor(gitIgnore);
    }
    
    @Bean
    public GitIgnoreCustomizer generatedGitIgnoreCustomizer() {
        return new GitIgnoreCustomizer() {
            @Override public void customize(GitIgnore gitIgnore) {
                var general = gitIgnore.getGeneral();
                general.add(CoGitIgnoreContributor.GENERATED_NOTICE);
                general.add("# this file was generated by " + CoGitIgnoreContributor.class.getName());
                general.add("# to prevent this generator from overriding any changes you make, delete the GENERATED NOTICE line");
                general.add("");
            }
            
            // prepend
            @Override public int getOrder() { return Ordered.HIGHEST_PRECEDENCE; }
        };
    }
    
}
