/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package io.github.causewaystuff.companion.codegen.domgen;

import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.List;
import java.util.stream.Collectors;

import org.jspecify.annotations.NonNull;

import lombok.SneakyThrows;
import lombok.experimental.UtilityClass;

import io.github.causewaystuff.commons.base.types.NamedPath;
import io.github.causewaystuff.commons.base.types.ResourceFolder;
import io.github.causewaystuff.companion.codegen.domgen.DomainGenerator.Config;
import io.github.causewaystuff.companion.codegen.model.Schema.Entity;

/**
 * Given a list of entities, creates a JPA persistence.xml file under src/main/resources/META-INF,
 * not including any JDBC specific configuration.
 */
@UtilityClass
class _GenPersistenceXml {

    @SneakyThrows
    void create(@NonNull final Config config, @NonNull final List<Entity> entities) {
        var unitName = config.moduleClassSimpleName();

        var classes = entities.stream()
                .map(Entity::fqn)
                .map(config::fullPackageName)
                .map("        <class>%s</class>"::formatted)
                .collect(Collectors.joining("\n"));

        var metaInfFolder = new ResourceFolder(config.destinationFolder().root().getParentFile())
                .makeDir(NamedPath.of("resources", "META-INF"));
        var dest = metaInfFolder.relativeFile("persistence.xml");
        var xml = """
                <?xml version="1.0" encoding="UTF-8"?>
                <!-- generated by %s -->
                <persistence version="2.1"
                    xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
                    <persistence-unit name="%s" transaction-type="RESOURCE_LOCAL">
                        <exclude-unlisted-classes>false</exclude-unlisted-classes>
                %s
                    </persistence-unit>
                </persistence>
                """.formatted(_GenPersistenceXml.class.getName(), unitName, classes);
        Files.writeString(dest.toPath(), xml.toString(), StandardCharsets.UTF_8);
    }
}
