/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package io.github.causewaystuff.companion.codegen.appgen;

import java.io.File;
import java.io.StringWriter;
import java.nio.charset.StandardCharsets;

import org.apache.maven.model.Model;
import org.apache.maven.model.Parent;
import org.apache.maven.model.io.xpp3.MavenXpp3Writer;

import org.apache.causeway.commons.io.FileUtils;
import org.apache.causeway.commons.io.TextUtils;

import lombok.SneakyThrows;

import io.github.causewaystuff.companion.schema.CoModule;
import io.github.causewaystuff.companion.schema.LicenseHeader;

/**
 * Generates the application's Maven POM files.
 */
public record MavenPomGen() implements CoGenerator{

    @Override
    public void onApplication(Context context) {
        var applicationModel = context.appModel();
        var mavenModel = new org.apache.maven.model.Model();
        mavenModel.setGroupId(applicationModel.groupId());
        mavenModel.setArtifactId(applicationModel.artifactId());
        mavenModel.setVersion(applicationModel.version());
        mavenModel.setName(applicationModel.name());
        mavenModel.setDescription(applicationModel.description());
        
        new PomWriter(mavenModel).write(context.license(), context.projectRoot());
    }

    @Override
    public void onModule(Context context, CoModule coModule) {
        var modRoot = context.moduleRoot(coModule);
        FileUtils.makeDir(new File(modRoot, "src/main/java"));
        
        var applicationModel = context.appModel();
        var rootAsParent = new Parent();
        rootAsParent.setGroupId(applicationModel.groupId());
        rootAsParent.setArtifactId(applicationModel.artifactId());
        rootAsParent.setVersion(applicationModel.version());
            
        var mavenModel = new org.apache.maven.model.Model();
        mavenModel.setArtifactId(applicationModel.artifactId() + "-" + coModule.id());
        mavenModel.setName(coModule.name());
        mavenModel.setDescription(coModule.description());
        mavenModel.setParent(rootAsParent);
        
        new PomWriter(mavenModel).write(context.license(), modRoot);
    }
    
    // -- HELPER
    
    private record PomWriter(Model model) {
        @SneakyThrows
        void write(LicenseHeader license, File destinationDir) {
            
            var destFile = new File(destinationDir, "pom.xml");
            
            var isVetoOverride = destFile.exists()
                && !TextUtils.readLinesFromFile(destFile, StandardCharsets.UTF_8)
                    .stream()
                    .limit(LicenseHeader.MAX_LINES + 4)
                    .anyMatch(line->line.trim().startsWith("GENERATED "));

            if(isVetoOverride) return;
            if(destFile.exists()) destFile.delete();

            // head comment
            var sw = new StringWriter();
            new MavenXpp3Writer().write(sw, model);
            var lines = TextUtils.readLines(sw.toString());
            
            var generatedMarker = "GENERATED by " + MavenPomGen.class.getName();
            
            var headComment = switch (license) {
                case ASF_V2 -> license.text() + "\n\n" + generatedMarker;
                case NONE -> generatedMarker;
            };
            
            lines = lines.add(1, "<!--\n%s\n-->".formatted(headComment));
            
            TextUtils.writeLinesToFile(lines, destFile, StandardCharsets.UTF_8);
        }
    }

}
